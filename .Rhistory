labs(x = "Year", y = "Count", title = "Number of Patients by Year") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Patient`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.5) +  # Line graph
geom_point(color = "lightgreen", size = 3) +  # Points on the line
labs(x = "Year", y = "Count", title = "Total patient each year") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
library(ggplot2)
library(sf)
library(ggmap)
library(maps)
library(dplyr)
library(sp)
library(tidyverse)
library(readxl)
library(leaflet)
library(htmltools)
library(leaflet.minicharts)
library(manipulateWidget)
library(ggplot2)
library(plotly)
# Load shapefiles
KK_sf <- read_sf("Khon Kaen.shp")
KK_sf_Mueang <- KK_sf %>% filter(ADM2_EN == "Mueang Khon Kaen")
# Data
SubDistrict66 <- read_excel("66.xlsx")
SubDistrict65 <- read_excel("65.xlsx")
SubDistrict64 <- read_excel("64.xlsx")
SubDistrict63 <- read_excel("63.xlsx")
SubDistrict62 <- read_excel("62.xlsx")
SubDistrict61 <- read_excel("61.xlsx")
SubDistrict60 <- read_excel("60.xlsx")
SubDistrict59 <- read_excel("59.xlsx")
SubDistrict58 <- read_excel("58.xlsx")
SubDistrict57 <- read_excel("57.xlsx")
Summary <- read_excel("D:/My_Research/SubDistrictMap/MapOfCrudeIncidence/Summary.xlsx")
# JoinData
combine66 <- left_join(KK_sf_Mueang,SubDistrict66, by = c("ADM1_TH"="Unique_province" ,"ADM2_TH" ="Unique_amp","ADM3_TH"="Unique_tambol" ))
combine65 <- left_join(KK_sf_Mueang,SubDistrict65, by = c("ADM1_TH"="Unique_province" ,"ADM2_TH" ="Unique_amp","ADM3_TH"="Unique_tambol" ))
combine64 <- left_join(KK_sf_Mueang,SubDistrict64, by = c("ADM1_TH"="Unique_province" ,"ADM2_TH" ="Unique_amp","ADM3_TH"="Unique_tambol" ))
combine63 <- left_join(KK_sf_Mueang,SubDistrict63, by = c("ADM1_TH"="Unique_province" ,"ADM2_TH" ="Unique_amp","ADM3_TH"="Unique_tambol" ))
combine62 <- left_join(KK_sf_Mueang,SubDistrict62, by = c("ADM1_TH"="Unique_province" ,"ADM2_TH" ="Unique_amp","ADM3_TH"="Unique_tambol" ))
combine61 <- left_join(KK_sf_Mueang,SubDistrict61, by = c("ADM1_TH"="Unique_province" ,"ADM2_TH" ="Unique_amp","ADM3_TH"="Unique_tambol" ))
combine60 <- left_join(KK_sf_Mueang,SubDistrict60, by = c("ADM1_TH"="Unique_province" ,"ADM2_TH" ="Unique_amp","ADM3_TH"="Unique_tambol" ))
combine59 <- left_join(KK_sf_Mueang,SubDistrict59, by = c("ADM1_TH"="Unique_province" ,"ADM2_TH" ="Unique_amp","ADM3_TH"="Unique_tambol" ))
combine58 <- left_join(KK_sf_Mueang,SubDistrict58, by = c("ADM1_TH"="Unique_province" ,"ADM2_TH" ="Unique_amp","ADM3_TH"="Unique_tambol" ))
combine57 <- left_join(KK_sf_Mueang,SubDistrict57, by = c("ADM1_TH"="Unique_province" ,"ADM2_TH" ="Unique_amp","ADM3_TH"="Unique_tambol" ))
# Custom color and legend
col_custom1 = c("#24693D","#80BF61","#FFFF00","#FFC500","#FF7400","#BE2A3E")
bins = c(1,101,201,301,401,500,Inf)
legend_labels <- c("1-100","101-200","201-300","301-400","401-500",">500")
# Combine66
colours_66  <- colorBin(col_custom1, domain = combine66$X100000, na.color = "transparent", bins = bins)
# Combine65
colours_65  <- colorBin(col_custom1, domain = combine65$X100000, na.color = "transparent", bins = bins)
# Combine64
colours_64  <- colorBin(col_custom1, domain = combine64$X100000, na.color = "transparent", bins = bins)
# Combine63
colours_63  <- colorBin(col_custom1, domain = combine63$X100000, na.color = "transparent", bins = bins)
# Combine62
colours_62  <- colorBin(col_custom1, domain = combine62$X100000, na.color = "transparent", bins = bins)
# Combine61
colours_61  <- colorBin(col_custom1, domain = combine61$X100000, na.color = "transparent", bins = bins)
# Combine60
colours_60  <- colorBin(col_custom1, domain = combine60$X100000, na.color = "transparent", bins = bins)
# Combine59
colours_59  <- colorBin(col_custom1, domain = combine59$X100000, na.color = "transparent", bins = bins)
# Combine58
colours_58  <- colorBin(col_custom1, domain = combine58$X100000, na.color = "transparent", bins = bins)
# Combine57
colours_57  <- colorBin(col_custom1, domain = combine57$X100000, na.color = "transparent", bins = bins)
# Label
popup66 <- paste0("<b>ตำบล:</b> ", combine66$ADM3_TH,
"<br><b>อำเภอ:</b> ", combine66$ADM2_TH,
"<br><b>จำนวนผู้ป่วย(คน):</b> ", combine66$count_if,
"<br><b>Population: </b>",  combine66$Total,
"<br><b>CIR: </b>",  combine66$X100000)
popup66 <- lapply(popup66, HTML)
popup65 <- paste0("<b>ตำบล:</b> ", combine65$ADM3_TH,
"<br><b>อำเภอ:</b> ", combine65$ADM2_TH,
"<br><b>จำนวนผู้ป่วย(คน):</b> ", combine65$count_if,
"<br><b>Population: </b>",  combine65$Total,
"<br><b>CIR: </b>",  combine65$X100000)
popup65 <- lapply(popup65, HTML)
popup64 <- paste0("<b>ตำบล:</b> ", combine64$ADM3_TH,
"<br><b>อำเภอ:</b> ", combine64$ADM2_TH,
"<br><b>จำนวนผู้ป่วย(คน):</b> ", combine64$count_if,
"<br><b>Population: </b>",  combine64$Total,
"<br><b>CIR: </b>",  combine64$X100000)
popup64 <- lapply(popup64, HTML)
popup63 <- paste0("<b>ตำบล:</b> ", combine63$ADM3_TH,
"<br><b>อำเภอ:</b> ", combine63$ADM2_TH,
"<br><b>จำนวนผู้ป่วย(คน):</b> ", combine63$count_if,
"<br><b>Population: </b>",  combine63$Total,
"<br><b>CIR: </b>",  combine63$X100000)
popup63 <- lapply(popup63, HTML)
popup62 <- paste0("<b>ตำบล:</b> ", combine62$ADM3_TH,
"<br><b>อำเภอ:</b> ", combine62$ADM2_TH,
"<br><b>จำนวนผู้ป่วย(คน):</b> ", combine62$count_if,
"<br><b>Population: </b>",  combine62$Total,
"<br><b>CIR: </b>",  combine62$X100000)
popup62 <- lapply(popup62, HTML)
popup61 <- paste0("<b>ตำบล:</b> ", combine61$ADM3_TH,
"<br><b>อำเภอ:</b> ", combine61$ADM2_TH,
"<br><b>จำนวนผู้ป่วย(คน):</b> ", combine61$count_if,
"<br><b>Population: </b>",  combine61$Total,
"<br><b>CIR: </b>",  combine61$X100000)
popup61 <- lapply(popup61, HTML)
popup60 <- paste0("<b>ตำบล:</b> ", combine60$ADM3_TH,
"<br><b>อำเภอ:</b> ", combine60$ADM2_TH,
"<br><b>จำนวนผู้ป่วย(คน):</b> ", combine60$count_if,
"<br><b>Population: </b>",  combine60$Total,
"<br><b>CIR: </b>",  combine60$X100000)
popup60 <- lapply(popup60, HTML)
popup59 <- paste0("<b>ตำบล:</b> ", combine59$ADM3_TH,
"<br><b>อำเภอ:</b> ", combine59$ADM2_TH,
"<br><b>จำนวนผู้ป่วย(คน):</b> ", combine59$count_if,
"<br><b>Population: </b>",  combine59$Total,
"<br><b>CIR: </b>",  combine59$X100000)
popup59 <- lapply(popup59, HTML)
popup58 <- paste0("<b>ตำบล:</b> ", combine58$ADM3_TH,
"<br><b>อำเภอ:</b> ", combine58$ADM2_TH,
"<br><b>จำนวนผู้ป่วย(คน):</b> ", combine58$count_if,
"<br><b>Population: </b>",  combine58$Total,
"<br><b>CIR: </b>",  combine58$X100000)
popup58 <- lapply(popup58, HTML)
popup57 <- paste0("<b>ตำบล:</b> ", combine57$ADM3_TH,
"<br><b>อำเภอ:</b> ", combine57$ADM2_TH,
"<br><b>จำนวนผู้ป่วย(คน):</b> ", combine57$count_if,
"<br><b>Population: </b>",  combine57$Total,
"<br><b>CIR: </b>",  combine57$X100000)
popup57 <- lapply(popup57, HTML)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Patient`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.5) +  # Line graph
geom_point(color = "lightgreen", size = 3) +  # Points on the line
labs(x = "Year", y = "Count", title = "Total patient each year") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;"
plotly::ggplotly(
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Patient`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.5) +  # Line graph
geom_point(color = "lightgreen", size = 3) +  # Points on the line
labs(x = "Year", y = "Count", title = "Total patients each year") +  # Corrected the title grammar
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.5) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = "Year", y = "Count", title = "Totol Population each year") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = "Year", y = "Number", title = "Totol Population each year") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 800px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = "Year", y = "Number", title = "Totol Population each year") +
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = "Year", y = "Number", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 600px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = "Year", y = "Number", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Patient`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "lightgreen", size = 3) +  # Points on the line
labs(x = "Year", y = "Number", title = "Total patients each year") +  # Corrected the title grammar
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 600px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Patient`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "lightgreen", size = 3) +  # Points on the line
labs(x = "Year", y = "Number", title = "Total patients each year") +  # Corrected the title grammar
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 600px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = "Year", y = "Number", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 600px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = "Year", y = "Number", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 600px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Patient`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "lightgreen", size = 3) +  # Points on the line
labs(x = "Year", y = "Number", title = "Total patients each year") +  # Corrected the title grammar
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 600px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
geom_text(aes(label = `Total Population`, y = `Total Population`), vjust = -1, hjust = 0.5, size = 3) +
labs(x = "Year", y = "Number", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 600px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
geom_text(aes(label = `Total Population`, y = `Total Population`), vjust = -1, hjust = 1, size = 3) +
labs(x = "Year", y = "Number", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 600px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
geom_text(aes(label = `Total Population`, y = `Total Population`), vjust = -3, hjust = 3, size = 3) +
labs(x = "Year", y = "Number", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 600px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
geom_text(aes(label = `Total Population`), vjust = -1, nudge_y = 10, size = 3) +  # Adjusted text position
labs(x = "Year", y = "Number", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 600px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
geom_text(aes(label = `Total Population`), vjust = -1, hjust = -0.2, nudge_y = 20, size = 3, angle = 45) +  # Adjusted text position and rotation
labs(x = "Year", y = "Number", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(y = "Total population", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = " ", y = "Total population", title = "Total Population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Patient`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "lightgreen", size = 3) +  # Points on the line
labs(x = " ", y = "Total patients", title = "Total patients each year") +  # Corrected the title grammar
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = " ", y = "Total population", title = "Total mid-year population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = " ", y = "Total population", title = "Total mid-year population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_light() + # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = " ", y = "Total population", title = "Total mid-year population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_gray() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = " ", y = "Total population", title = "Total mid-year population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = " ", y = "Total population", title = "Total mid-year population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_bw() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
htmltools::div(
class = "value-box",
style = "border-radius: 5px; padding: 5px; width: 525px; margin: 0 auto; text-align: center;",
plotly::ggplotly(
ggplot(Summary, aes(x = Year, y = `Total Population`)) +  # Use backticks for column name with spaces
geom_line(color = "black", size = 0.3) +  # Line graph
geom_point(color = "blue", size = 3) +  # Points on the line
labs(x = " ", y = "Total population", title = "Total mid-year population each year") +
scale_x_continuous(breaks = unique(Summary$Year)) +  # Ensure all years are labeled
theme_minimal() +  # Minimal theme for a cleaner look
theme(legend.position = 'none')
)
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
htmltools::HTML('$$I = \\frac{n}{S_0} \\cdot \\frac{\\sum_{i=1}^{n} \\sum_{j=1}^{n} w_{ij} (x_i - \\bar{x})(x_j - \\bar{x})}{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}$$
Where:
- \(n\) is the total number of observations.
htmltools::HTML('$$I = \\frac{n}{S_0} \\cdot \\frac{\\sum_{i=1}^{n} \\sum_{j=1}^{n} w_{ij} (x_i - \\bar{x})(x_j - \\bar{x})}{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}$$
<br>
Where:
<ul>
<li>\\(n\\) is the total number of observations.</li>
<li>\\(x_i\\) and \\(x_j\\) are the values of the variable of interest at locations \\(i\\) and \\(j\\).</li>
<li>\\(\\bar{x}\\) is the mean of the variable of interest.</li>
<li>\\(w_{ij}\\) is the spatial weight between locations \\(i\\) and \\(j\\).</li>
<li>\\(S_0 = \\sum_{i=1}^{n} \\sum_{j=1}^{n} w_{ij}\\)</li>
</ul>')
htmltools::HTML('$$I_i = \\frac{(x_i - \\bar{x}) \\sum_{j=1}^{n} w_{ij} (x_j - \\bar{x})}{m_2}$$
<br>
Where:
<ul>
<li>\\(I_i\\) is the Local Moran’s I for observation \\(i\\).</li>
<li>\\(x_i\\) is the value of the variable of interest at location \\(i\\).</li>
<li>\\(x_j\\) is the value of the variable at location \\(j\\).</li>
<li>\\(\\bar{x}\\) is the mean of the variable of interest.</li>
<li>\\(w_{ij}\\) is the spatial weight between location \\(i\\) and location \\(j\\).</li>
<li>\\(m_2 = \\frac{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}{n}\\), where \\(n\\) is the number of observations.</li>
</ul>')
